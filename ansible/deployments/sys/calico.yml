# Calico Version v3.0.3
# https://docs.projectcalico.org/v3.0/releases#v3.0.3

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
rules:
  - apiGroups:
    - ""
    - extensions
    resources:
      - pods
      - namespaces
      - networkpolicies
      - nodes
    verbs:
      - watch
      - list
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-kube-controllers
subjects:
- kind: ServiceAccount
  name: calico-kube-controllers
  namespace: kube-system

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: calico-node
rules:
  - apiGroups: [""]
    resources:
      - pods
      - nodes
    verbs:
      - get

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: calico-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: calico-node
subjects:
- kind: ServiceAccount
  name: calico-node
  namespace: kube-system


---

# Calico Version v3.0.3
# https://docs.projectcalico.org/v3.0/releases#v3.0.3
# This manifest includes the following component versions:
#   calico/node:v3.0.3
#   calico/cni:v2.0.1
#   calico/kube-controllers:v2.0.1

# This ConfigMap is used to configure a self-hosted Calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "https://172.16.0.10:2379,https://172.16.0.11:2379,https://172.16.0.12:2379"

  # Configure the Calico backend to use.
  calico_backend: "bird"

  # The CNI network configuration to install on each node.
  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.0",
      "plugins": [
        {
            "type": "calico",
            "etcd_endpoints": "__ETCD_ENDPOINTS__",
            "etcd_key_file": "__ETCD_KEY_FILE__",
            "etcd_cert_file": "__ETCD_CERT_FILE__",
            "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
            "log_level": "info",
            "mtu": 1500,
            "ipam": {
                "type": "calico-ipam"
            },
            "policy": {
                "type": "k8s",
                "k8s_api_root": "https://__KUBERNETES_SERVICE_HOST__:__KUBERNETES_SERVICE_PORT__",
                "k8s_auth_token": "__SERVICEACCOUNT_TOKEN__"
            },
            "kubernetes": {
                "kubeconfig": "__KUBECONFIG_FILEPATH__"
            }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }

  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"

---

# The following contains k8s Secrets for use with a TLS enabled etcd cluster.
# For information on populating Secrets, see http://kubernetes.io/docs/user-guide/secrets/
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: kube-system
data:
  etcd-key: "LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSU9CNVhMSjJlYVlIUEVMaWhwL3pReUxXcnVHbFRNanpCb0VLS0s3alNUeFZvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFQVo2TVpXSS9jbkxENzc1OThJNENsRVkwYTdLc1FLdE50RzlocGd4QmxwVDJLY21zZFBZRgpZbjRTejBYaWUvZjdSYnprZ3cxbUtkSE9oY2VoSDNPT3hBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo="
  etcd-cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNXRENDQVVDZ0F3SUJBZ0lVUGM2UnViUUFGWHp5QmQxTXA5OXFYZUdHNklNd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0R6RU5NQXNHQTFVRUF4TUVaWFJqWkRBZUZ3MHhPREF6TVRNeE1qSTFNREJhRncweU16QXpNVEl4TWpJMQpNREJhTUJFeER6QU5CZ05WQkFNVEJtTnNhV1Z1ZERCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBCkJBR2VqR1ZpUDNKeXcrKytmZkNPQXBSR05HdXlyRUNyVGJSdllhWU1RWmFVOWluSnJIVDJCV0orRXM5RjRudjMKKzBXODVJTU5aaW5Sem9YSG9SOXpqc1NqZFRCek1BNEdBMVVkRHdFQi93UUVBd0lGb0RBVEJnTlZIU1VFRERBSwpCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CMEdBMVVkRGdRV0JCU2MrcFhLRUhIK1lJQnhmTXNUCjgycHNPUGx6Y1RBZkJnTlZIU01FR0RBV2dCUzE1NU0zMHZJWGZGaCtIMzVuaWpZcUdsUmJ6VEFOQmdrcWhraUcKOXcwQkFRc0ZBQU9DQVFFQU5XbE9MQTByblBsMmhlcHlDRGwxL3g3cWhlT3M0Mk90dFJUOWdZejZBMTJMaUtxegozTGtsT3MvZFduOG81QVMwYTFBczVoZjZURTR4aklnOG40QzlEYzNDd1YrZDZiMGdoMkdESHJSenZDczBZMmlSCmliVWN5ZitPQ01sV1B5N1JUWUFJeHN0M00xZW0wT1Q3UCtzOVJPM1AvVnFrWG1ORzU4MHBjaHBGZUJ0d0llVkUKYWpGb3doaUdYd0dBTWtURGhYZlljK1lVckcyRjFrSDFTSXdFUEd5aERuRFluSkk4eGYwL2h3VzVGdWdQbDd5bwpVSjQrTVpJZ2g1cGFLVjVQcmtPckJhY2QwbnIvY0NOUXN4U2IxSU1KZXFPSnB1UUIwZEZCdEJFYXozcU9lZk5KCmpPUjhOSVM1VTVxSEJSRHl4bnBKNDJWeGxhWWVmbUdPRkxxekxRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
  etcd-ca: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFakNDQWZxZ0F3SUJBZ0lVSE5oWUM2VDFBVE1wM2JMbnp4NHdQUFlMZWY4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0R6RU5NQXNHQTFVRUF4TUVaWFJqWkRBZUZ3MHhPREF6TVRNeE1qSTFNREJhRncweU16QXpNVEl4TWpJMQpNREJhTUE4eERUQUxCZ05WQkFNVEJHVjBZMlF3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUURJWjhXbDFpYklwUVpqT1gzTUwvZVJmenRDR0NhTk1LTDlVd1hYd0hmakNOQ01OWk94VWhwbjJFVmQKbHdqNzFCK1F2T0VXVTRsenoxa3lVcDBVYVZ1NUI2TGw2cUc1dldiZElDWmlGNlRWbE91SlFoZ1BmR0FNcVAxUQpmeUtJR0xrYUlFaHNMUWkwbHUrQ0d5dERKTHgyYWw4SElkV3NrZXlTcWpYQTg1M2htY3VTdklIMzVKcDdnWjB0CkRDN09nRjhaMzRieXZNQzhKN2tTRXVMYnBsRldBeitiZ1k3RUJTQXZYRTkxdVpWN2lvdHNudFVRbGpDaWpNVVcKSi9PajRqRVlpMVoveGsxdGZhbldPVzY4cURya2lpOUZvNEpWeEtoMldDR2YrenVZaldLeGhya00wNC9Ca1JBaAp6enNiSUJzek4zT3RISmVoRFFINDRRMmUvS1NOQWdNQkFBR2paakJrTUE0R0ExVWREd0VCL3dRRUF3SUJCakFTCkJnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQ01CMEdBMVVkRGdRV0JCUzE1NU0zMHZJWGZGaCtIMzVuaWpZcUdsUmIKelRBZkJnTlZIU01FR0RBV2dCUzE1NU0zMHZJWGZGaCtIMzVuaWpZcUdsUmJ6VEFOQmdrcWhraUc5dzBCQVFzRgpBQU9DQVFFQXMxaFc2QVAwUTRBbXJodDY2Sk5vT3BxWmhncHMyTUgxZjJiV0FtR2xsakMvZWp2VC9OWER2N1ZHCkVjdUxiZ2Q0TVY1UXdLOTVEZGlucjJ4Qkd0OVJRYXZESVhpa1k1dGo5VFlnd29NUFRWYStTWk5QZjd3Q0VHakQKcHViSk5kRWN3NnhrWDVscVN5SHhOcmovMy9LQVdORGRDa0VoUEloNUdyN2JuYUN3cmdxTWZkbHpRdkhuc09RaApWM2VFWUhmSnhuQ2NydkpaWUlRbmsrektHR1FaRFhMVUllTlJSZ01MaC9hWnI1dWZ3UFliY3EzNzFmNmVIZWdwCkhHWEQ2dHpTcFovRUFKSmFkV2hmY0NMa0J0blM1RHFURjlaaDNERkgxZ1h4ZDhZUkZCQk04WlpTcDZ3Y1JwSmgKTnE2U1cxM1FqajFQWWNoNDJOckVYOHBieml0cjRnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="

---

# This manifest installs the calico/node container, as well
# as the Calico CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      containers:
        # Runs calico/node container on each Kubernetes node.  This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: quay.io/calico/node:v3.0.3
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: calico_backend
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "k8s,bgp"
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set noderef for node controller.
            - name: CALICO_K8S_NODE_REF
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "10.244.0.0/16"
            - name: CALICO_IPV4POOL_IPIP
              value: "Always"
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "1440"
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Auto-detect the BGP IP address.
            - name: IP
              value: "autodetect"
            - name: FELIX_HEALTHENABLED
              value: "true"
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /liveness
              port: 9099
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9099
            periodSeconds: 10
          volumeMounts:
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /calico-secrets
              name: etcd-certs
        # This container installs the Calico CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: quay.io/calico/cni:v2.0.2
          command: ["/install-cni.sh"]
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: cni_network_config
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Used by calico/node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

# This manifest deploys the Calico Kubernetes controllers.
# See https://github.com/projectcalico/kube-controllers
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: calico-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: calico-kube-controllers
  annotations:
    scheduler.alpha.kubernetes.io/critical-pod: ''
spec:
  # The controllers can only have a single active instance.
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      name: calico-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: calico-kube-controllers
    spec:
      # The controllers must run in the host network namespace so that
      # it isn't governed by policy that would prevent it from working.
      hostNetwork: true
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      serviceAccountName: calico-kube-controllers
      containers:
        - name: calico-kube-controllers
          image: quay.io/calico/kube-controllers:v2.0.1
          env:
            # The location of the Calico etcd cluster.
            - name: ETCD_ENDPOINTS
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_endpoints
            # Location of the CA certificate for etcd.
            - name: ETCD_CA_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_ca
            # Location of the client key for etcd.
            - name: ETCD_KEY_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_key
            # Location of the client certificate for etcd.
            - name: ETCD_CERT_FILE
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: etcd_cert
            # Choose which controllers to run.
            - name: ENABLED_CONTROLLERS
              value: policy,profile,workloadendpoint,node
          volumeMounts:
            # Mount in the etcd TLS secrets.
            - mountPath: /calico-secrets
              name: etcd-certs
      volumes:
        # Mount in the etcd TLS secrets.
        - name: etcd-certs
          secret:
            secretName: calico-etcd-secrets

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-kube-controllers
  namespace: kube-system

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: calico-node
  namespace: kube-system