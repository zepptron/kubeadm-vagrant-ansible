---

- name: Ensure etcdctl is configured with env vars
  when: proxy == true
  lineinfile:
    state: present
    dest: "{{ item.dest }}"
    line: "{{ item.line }}"
  with_items: "{{ env_vars }}"
  tags: [kubeadm]

- name: Ensure to pass bridged IPv4 traffic to iptables chains
  sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: 1
    sysctl_set: yes
    state: present
    reload: yes
  tags: [kubeadm]

- name: Add Google GPG key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  register: add_repository_key
  ignore_errors: true
  tags: [kubeadm]

- name: Ensure Kubernetes repo is available
  apt_repository:
    repo: 'deb http://apt.kubernetes.io/ {{ kube_channel }} main'
    filename: kubernetes
    state: present
  tags: [kubeadm]

- name: Update APT Cache
  apt:
    update_cache: yes
  tags: [kubeadm]

- name: Installing Kubelets and Kubeadm
  apt:
    name: "{{ item.package }}"
    state: present
  with_items: "{{ packs }}"
  tags: [kubeadm]

- name: Ensure all needed directories are present
  file:
    state: directory
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
  with_items: "{{ dirs }}"
  tags: [kubeadm]

- name: Ensure generic configfiles are present
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ generic_configs }}"
  tags: [kubeadm]

- name: Ensure master configs are present
  when: master is defined
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ master_configs }}"
  tags: [kubeadm]

- name: Ensure systemd is reloaded
  systemd: daemon_reload=yes
  tags: [kubeadm]

- name: Ensure kubelet has restarted
  systemd:
    state: restarted
    name: kubelet
  tags: [kubeadm]

- name: Ensure Kubernetes master is set to defaultvalues
  shell: "kubeadm reset"
  tags: [kubeadm]

- name: Init Kubernetes cluster
  when: master is defined
  shell: kubeadm init --config {{ kubeadm_config_dir}}/config.yml 
  tags: [kubeadm]

- name: Copy kube configs to users
  when: master is defined
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode: "{{ item.mode }}"
  with_items: "{{ copy }}"
  tags: [kubeadm]

- name: Ensure Kubernetes nodes are set to defaultvalues
  when: worker is defined
  shell: "kubeadm reset"
  tags: [kubeadm]

- name: Ensure nodes are connected to the Kubernetes API
  when: worker is defined
  shell: kubeadm join --token {{ kube_token }} {{ kube_master_ip }}:6443 --discovery-token-unsafe-skip-ca-verification
  tags: [kubeadm]

- name: insert/update "Match User" configuration block in /etc/ssh/sshd_config
  when: master is defined
  blockinfile:
    path: /root/.bashrc
    block: |
      source <(helm completion bash)
      source <(kubectl completion bash)
      function k-sys() {
        alias k="kubectl --namespace kube-system"
        printf "\n${red}kubectl --namespace kube-system active\n\n${reset}"
      }
      function k-pub() {
        alias k="kubectl --namespace kube-public"
        printf "\n${green}kubectl --namespace kube-public active\n\n${reset}"
      }
      function k-def() {
        alias k="kubectl"
        printf "\n${green}kubectl without namespace active\n\n${reset}"
      }
      function k-nodes() {
        for i in kube-{1..3}; do
          printf "${yellow}item: $i:${reset}\n"
          kubectl describe node $i.foo.io | grep -A4 "Allocated resources:"
        done
      }
  tags: [kubeadm]

- name: Starting Calico...
  when: master is defined
  shell: "kubectl create -f /vagrant/ansible/deployments/sys/calico.yml"
  tags: [kubeadm]

- name: Starting Traefik...
  when: master is defined
  shell: "kubectl create -f /vagrant/ansible/deployments/sys/traefik.yml"
  tags: [kubeadm]
